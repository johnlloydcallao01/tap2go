(()=>{var e={};e.id=1484,e.ids=[1484],e.modules={1241:()=>{},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},11723:e=>{"use strict";e.exports=require("querystring")},11753:(e,r,t)=>{"use strict";t.d(r,{G7:()=>i,Rk:()=>n});let s={cloudName:"dpekh75yi",apiKey:process.env.CLOUDINARY_API_KEY,apiSecret:process.env.CLOUDINARY_API_SECRET},a=Object.entries(s).filter(([,e])=>!e).map(([e])=>e);a.length>0&&console.warn(`Missing Cloudinary environment variables: ${a.join(", ")}`),s.cloudName;let o=async()=>{let{v2:e}=await t.e(1870).then(t.t.bind(t,71870,23));return e.config().cloud_name||e.config({cloud_name:"dpekh75yi",api_key:process.env.CLOUDINARY_API_KEY,api_secret:process.env.CLOUDINARY_API_SECRET,secure:!0}),e},n=async(e,r={})=>{try{let t,s=await o();if("string"==typeof e)t=e;else{let r=await e.arrayBuffer(),s=Buffer.from(r).toString("base64");t=`data:${e.type};base64,${s}`}let a={upload_preset:"tap2go-uploads",folder:r.folder||"main-uploads",resource_type:"auto",...r};console.log("\uD83D\uDD04 Uploading to Cloudinary with options:",a);let n=await s.uploader.upload(t,a);return console.log("✅ Cloudinary upload successful:",n.public_id),n}catch(r){console.error("❌ Cloudinary upload error:",r);let e=r instanceof Error?r.message:"Unknown error";throw Error(`Cloudinary upload failed: ${e}`)}},i=async e=>{try{let r=await o(),t=await r.uploader.destroy(e);return"ok"===t.result}catch(e){return console.error("Cloudinary delete error:",e),!1}}},11997:e=>{"use strict";e.exports=require("punycode")},27910:e=>{"use strict";e.exports=require("stream")},29021:e=>{"use strict";e.exports=require("fs")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},33873:e=>{"use strict";e.exports=require("path")},34631:e=>{"use strict";e.exports=require("tls")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},55511:e=>{"use strict";e.exports=require("crypto")},55591:e=>{"use strict";e.exports=require("https")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},63511:(e,r,t)=>{"use strict";t.d(r,{E2:()=>l,ND:()=>i});var s=t(94202);let a="https://iblujnytqusttngujhob.supabase.co",o="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlibHVqbnl0cXVzdHRuZ3VqaG9iIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkyNjQxNjMsImV4cCI6MjA2NDg0MDE2M30.zt4RCWmS3POQtULRl27UcdGGCPGbYPJvTr8l6YlOhvA",n=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!a||!o)throw Error("Missing Supabase environment variables. Please check your .env.local file.");let i=(0,s.createClient)(a,o,{auth:{persistSession:!1},db:{schema:"public"},realtime:{params:{eventsPerSecond:-1}},global:{headers:{"X-Client-Info":"tap2go-cms"}}}),l=n?(0,s.createClient)(a,n,{auth:{autoRefreshToken:!1,persistSession:!1},db:{schema:"public"},realtime:{params:{eventsPerSecond:-1}},global:{headers:{"X-Client-Info":"tap2go-cms-admin"}}}):null},69271:(e,r,t)=>{"use strict";t.r(r),t.d(r,{patchFetch:()=>h,routeModule:()=>g,serverHooks:()=>f,workAsyncStorage:()=>m,workUnitAsyncStorage:()=>y});var s={};t.r(s),t.d(s,{GET:()=>p,POST:()=>d});var a=t(96559),o=t(48088),n=t(37719),i=t(32190),l=t(63511),u=t(11753);class c{constructor(){this.isProcessing=!1}static getInstance(){return c.instance||(c.instance=new c),c.instance}async processCleanupQueue(e=10){if(this.isProcessing)return console.log("⏳ Cleanup queue processing already in progress"),{processed:0,failed:0,pending:0};this.isProcessing=!0;let r=0,t=0;try{let s=l.E2||l.ND,{data:a,error:o}=await s.from("cloudinary_cleanup_queue").select("*").eq("status","pending").order("created_at",{ascending:!0}).limit(e);if(o)throw console.error("❌ Error fetching cleanup queue:",o),o;if(!a||0===a.length)return console.log("✅ No pending Cloudinary cleanup items"),{processed:0,failed:0,pending:0};for(let e of(console.log(`🔄 Processing ${a.length} Cloudinary cleanup items`),a)){try{await this.markAsProcessing(e.id),console.log(`🌩️ Deleting from Cloudinary: ${e.cloudinary_public_id}`),await (0,u.G7)(e.cloudinary_public_id)?(await this.markAsCompleted(e.id),r++,console.log(`✅ Successfully deleted from Cloudinary: ${e.cloudinary_public_id}`)):(await this.markAsFailed(e.id,"Cloudinary deletion returned false"),t++,console.log(`❌ Failed to delete from Cloudinary: ${e.cloudinary_public_id}`))}catch(s){let r=s instanceof Error?s.message:"Unknown error";await this.markAsFailed(e.id,r),t++,console.error(`❌ Error processing cleanup item ${e.id}:`,s)}await new Promise(e=>setTimeout(e,100))}let{count:n}=await s.from("cloudinary_cleanup_queue").select("*",{count:"exact",head:!0}).eq("status","pending");return console.log(`📊 Cleanup batch completed: ${r} processed, ${t} failed, ${n||0} pending`),{processed:r,failed:t,pending:n||0}}catch(e){throw console.error("❌ Error processing cleanup queue:",e),e}finally{this.isProcessing=!1}}async markAsProcessing(e){let r=l.E2||l.ND,{error:t}=await r.from("cloudinary_cleanup_queue").update({status:"processing",processed_at:new Date().toISOString()}).eq("id",e);t&&console.error("Error marking cleanup item as processing:",t)}async markAsCompleted(e){let r=l.E2||l.ND,{error:t}=await r.from("cloudinary_cleanup_queue").update({status:"completed",processed_at:new Date().toISOString()}).eq("id",e);t&&console.error("Error marking cleanup item as completed:",t)}async markAsFailed(e,r){let t=l.E2||l.ND,{data:s}=await t.from("cloudinary_cleanup_queue").select("retry_count").eq("id",e).single(),a=(s?.retry_count||0)+1,{error:o}=await t.from("cloudinary_cleanup_queue").update({status:"failed",processed_at:new Date().toISOString(),error_message:r,retry_count:a}).eq("id",e);o&&console.error("Error marking cleanup item as failed:",o)}async retryFailedCleanups(e=3){try{let r=l.E2||l.ND,{data:t,error:s}=await r.from("cloudinary_cleanup_queue").update({status:"pending",processed_at:null,error_message:null}).eq("status","failed").lt("retry_count",e).select("id");if(s)throw console.error("Error retrying failed cleanups:",s),s;let a=t?.length||0;return console.log(`🔄 Retrying ${a} failed cleanup items`),a}catch(e){throw console.error("Error retrying failed cleanups:",e),e}}async getQueueStats(){try{let e=l.E2||l.ND,{data:r,error:t}=await e.from("cloudinary_cleanup_queue").select("status").order("created_at",{ascending:!1});if(t)throw console.error("Error getting queue stats:",t),t;let s={pending:0,processing:0,completed:0,failed:0,total:r?.length||0};return r?.forEach(e=>{s[e.status]++}),s}catch(e){throw console.error("Error getting queue stats:",e),e}}async cleanupOldRecords(e=30){try{let r=l.E2||l.ND,t=new Date;t.setDate(t.getDate()-e);let{data:s,error:a}=await r.from("cloudinary_cleanup_queue").delete().eq("status","completed").lt("processed_at",t.toISOString()).select("id");if(a)throw console.error("Error cleaning up old records:",a),a;let o=s?.length||0;return console.log(`🧹 Cleaned up ${o} old completed records`),o}catch(e){throw console.error("Error cleaning up old records:",e),e}}}async function d(e){try{let{batchSize:r=10,retryFailed:t=!1,maxRetries:s=3,cleanupOld:a=!1,daysOld:o=30}=await e.json().catch(()=>({})),n=c.getInstance();if(t){let e=await n.retryFailedCleanups(s);console.log(`🔄 Retried ${e} failed cleanup items`)}if(a){let e=await n.cleanupOldRecords(o);console.log(`🧹 Cleaned up ${e} old records`)}let l=await n.processCleanupQueue(r),u=await n.getQueueStats();return i.NextResponse.json({success:!0,message:"Cloudinary cleanup queue processed successfully",data:{batch_result:l,queue_stats:u,options:{batchSize:r,retryFailed:t,maxRetries:s,cleanupOld:a,daysOld:o}}})}catch(r){console.error("Cloudinary cleanup API error:",r);let e=r instanceof Error?r.message:"Cleanup failed";return i.NextResponse.json({error:"Cleanup failed",message:e},{status:500})}}async function p(){try{let e=c.getInstance(),r=await e.getQueueStats();return i.NextResponse.json({success:!0,message:"Cloudinary cleanup queue statistics",data:{queue_stats:r}})}catch(r){console.error("Cloudinary cleanup stats API error:",r);let e=r instanceof Error?r.message:"Failed to get stats";return i.NextResponse.json({error:"Failed to get stats",message:e},{status:500})}}let g=new a.AppRouteRouteModule({definition:{kind:o.RouteKind.APP_ROUTE,page:"/api/media/cleanup-cloudinary/route",pathname:"/api/media/cleanup-cloudinary",filename:"route",bundlePath:"app/api/media/cleanup-cloudinary/route"},resolvedPagePath:"C:\\Users\\ACER\\Desktop\\tap2go\\apps\\web\\src\\app\\api\\media\\cleanup-cloudinary\\route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:m,workUnitAsyncStorage:y,serverHooks:f}=g;function h(){return(0,n.patchFetch)({workAsyncStorage:m,workUnitAsyncStorage:y})}},72088:()=>{},74075:e=>{"use strict";e.exports=require("zlib")},78335:()=>{},79428:e=>{"use strict";e.exports=require("buffer")},79551:e=>{"use strict";e.exports=require("url")},80765:e=>{function r(e){var r=Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}r.keys=()=>[],r.resolve=r,r.id=80765,e.exports=r},81630:e=>{"use strict";e.exports=require("http")},91645:e=>{"use strict";e.exports=require("net")},94735:e=>{"use strict";e.exports=require("events")},96487:()=>{}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[4447,580,4202],()=>t(69271));module.exports=s})();